service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    useChildProcesses: true

  dynamodb:
    start:
      inMemory: true
      migrate: true
    stages:
      - ${self:provider.stage}

  s3:
    host: localhost
    directory: .s3

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    JWKS_ENDPOINT: https://udacity-serverless-todo.us.auth0.com/.well-known/jwks.json
    TODOS_TABLE_NAME: ${self:service}-${self:provider.stage}-todos-table
    TODOS_TABLE_INDEX_NAME: ${self:service}-${self:provider.stage}-todos-table-index
    ATTACHMENT_STORAGE: ${self:service}-${self:provider.stage}-attachment-storage

functions:
  Auth:
    handler: src/lambda/auth/auth0-authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/get-todos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer:
            name: Auth

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/create-todo.handler
    events:
      - http:
          method: post
          path: todos

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/update-todo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/delete-todo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generate-upload-url.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: TodoId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_TABLE_INDEX_NAME}
            KeySchema:
              - AttributeName: UserId
                KeyType: HASH
              - AttributeName: TodoId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AttachmentStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_STORAGE}
